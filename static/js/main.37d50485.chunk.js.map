{"version":3,"sources":["Colors.jsx","Palette.jsx","Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Colors","hex","style","backgroundColor","className","tinycolor","require","Palette","colors","variation","setting","settingValue","tetrad","analogous","monochromatic","splitcomplement","triad","complement","toHexString","colorPalette","Array","isArray","map","t","color","hexColor","toUpperCase","lighten","toString","brighten","darken","desaturate","saturate","greyscale","undefined","id","Settings","changeHex","changeVariation","changeSetting","changeSettingValue","Navbar","expand","bg","variant","Nav","Toggle","aria-controls","Collapse","OverlayTrigger","placement","delay","show","hide","overlay","props","Tooltip","Link","onClick","randomColor","random","setRandom","NavDropdown","onSelect","e","title","Item","eventKey","Divider","changeSettings","handleSettingValueChange","Form","onChange","preventDefault","target","value","handleHexChange","inline","FormControl","type","placeholder","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.37d50485.chunk.js","sourcesContent":["import React from 'react';\n\n// function copyColor(e) {\n// \tconsole.log(e);\n// }\n\nexport default function Colors({ hex }) {\n\treturn (\n\t\t<div style={{ backgroundColor: hex }} className='color'>\n\t\t\t<div className='hex-value'>{hex}</div>\n\t\t</div>\n\t);\n}\n","import React from 'react';\nimport Colors from './Colors';\nimport './Palette.css';\n\nconst tinycolor = require('tinycolor2');\n\nexport default function Palette({ hex, variation, setting, settingValue }) {\n\tlet colors;\n\t// Using a switch to set variation type set\n\tswitch (variation) {\n\t\tdefault:\n\t\t\tcolors = tinycolor(hex).tetrad();\n\t\t\tbreak;\n\t\tcase 'analogous':\n\t\t\tcolors = tinycolor(hex).analogous();\n\t\t\tbreak;\n\t\tcase 'monochromatic':\n\t\t\tcolors = tinycolor(hex).monochromatic();\n\t\t\tbreak;\n\t\tcase 'splitcomplement':\n\t\t\tcolors = tinycolor(hex).splitcomplement();\n\t\t\tbreak;\n\t\tcase 'triad':\n\t\t\tcolors = tinycolor(hex).triad();\n\t\t\tbreak;\n\t\tcase 'tetrad':\n\t\t\tcolors = tinycolor(hex).tetrad();\n\t\t\tbreak;\n\t\tcase 'complement':\n\t\t\tcolors = tinycolor(hex).complement().toHexString();\n\t\t\tbreak;\n\t}\n\n\t// Using a dictionary object to set setting\n\tconst settings = color => {\n\t\tconst converter = {\n\t\t\tlighten: tinycolor(color).lighten(settingValue).toString(),\n\t\t\tbrighten: tinycolor(color).brighten(settingValue).toString(),\n\t\t\tdarken: tinycolor(color).darken(settingValue).toString(),\n\t\t\tdesaturate: tinycolor(color).desaturate(settingValue).toString(),\n\t\t\tsaturate: tinycolor(color).saturate(settingValue).toString(),\n\t\t\tgreyscale: tinycolor(color).greyscale(settingValue).toString(),\n\t\t\tundefined: color,\n\t\t};\n\n\t\treturn converter[setting];\n\t};\n\n\tlet colorPalette;\n\tif (!Array.isArray(colors)) {\n\t\treturn <Colors hex={colors} />;\n\t} else {\n\t\tcolorPalette = colors.map(t => {\n\t\t\tlet hexColor = t.toHexString().toUpperCase();\n\n\t\t\thexColor = settings(hexColor);\n\n\t\t\treturn <Colors hex={hexColor} />;\n\t\t});\n\t}\n\n\treturn <div id='container'>{colorPalette}</div>;\n}\n","import React from 'react';\nimport {\n\tNavbar,\n\tForm,\n\tNav,\n\tFormControl,\n\tNavDropdown,\n\tTooltip,\n\tOverlayTrigger,\n} from 'react-bootstrap';\n\nconst tinycolor = require('tinycolor2');\n\nexport default function Settings({\n\tchangeHex,\n\tchangeVariation,\n\tchangeSetting,\n\tchangeSettingValue,\n}) {\n\tconst handleHexChange = e => {\n\t\te.preventDefault();\n\t\tchangeHex(e.target.value);\n\t};\n\n\tconst handleVariationChange = variation => {\n\t\tchangeVariation(variation);\n\t};\n\n\tconst changeSettings = e => {\n\t\tchangeSetting(e);\n\t};\n\n\tconst setRandom = () => {\n\t\tconst randomColor = tinycolor.random().toHexString();\n\t\tchangeHex(randomColor);\n\t};\n\n\tconst handleSettingValueChange = e => {\n\t\tchangeSettingValue(e);\n\t};\n\n\tfunction renderTooltipBrand(props) {\n\t\treturn (\n\t\t\t<Tooltip id='button-tooltip' {...props}>\n\t\t\t\tClick to Generate Colors\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tfunction renderTooltipSchemes(props) {\n\t\treturn (\n\t\t\t<Tooltip id='button-tooltip' {...props}>\n\t\t\t\tTry different Color Schemes\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tfunction renderTooltipAdjustments(props) {\n\t\treturn (\n\t\t\t<Tooltip id='button-tooltip' {...props}>\n\t\t\t\tMake Adjustments to the Current Palette\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tfunction renderTooltipIntensity(props) {\n\t\treturn (\n\t\t\t<Tooltip id='button-tooltip' {...props}>\n\t\t\t\tChange the Intensity of the Adjustments\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\tfunction renderTooltipInput(props) {\n\t\treturn (\n\t\t\t<Tooltip id='button-tooltip' {...props}>\n\t\t\t\tGenerate a Palette from a Hex Value\n\t\t\t</Tooltip>\n\t\t);\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<Navbar expand='lg' bg='dark' variant='dark'>\n\t\t\t\t<Nav className='mr-auto'>\n\t\t\t\t\t<Navbar.Toggle aria-controls='responsive-navbar-nav' />\n\n\t\t\t\t\t<Navbar.Collapse id='responsive-navbar-nav'>\n\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\tplacement='bottom'\n\t\t\t\t\t\t\tdelay={{ show: 250, hide: 200 }}\n\t\t\t\t\t\t\toverlay={renderTooltipBrand}>\n\t\t\t\t\t\t\t<Nav.Link id='brand' onClick={() => setRandom()}>\n\t\t\t\t\t\t\t\tColor Palette Generator\n\t\t\t\t\t\t\t</Nav.Link>\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\tplacement='right'\n\t\t\t\t\t\t\tdelay={{ show: 250, hide: 200 }}\n\t\t\t\t\t\t\toverlay={renderTooltipSchemes}>\n\t\t\t\t\t\t\t<NavDropdown\n\t\t\t\t\t\t\t\tonSelect={e => handleVariationChange(e)}\n\t\t\t\t\t\t\t\ttitle='Schemes'\n\t\t\t\t\t\t\t\tid='schemes'>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='analogous'>\n\t\t\t\t\t\t\t\t\tAnalogous\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='monochromatic'>\n\t\t\t\t\t\t\t\t\tMonochromatic\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='complement'>\n\t\t\t\t\t\t\t\t\tComplement\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='splitcomplement'>\n\t\t\t\t\t\t\t\t\tSplit Complement\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='triad'>Triad</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='tetrad'>Tetrad</NavDropdown.Item>\n\t\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\tplacement='right'\n\t\t\t\t\t\t\tdelay={{ show: 250, hide: 200 }}\n\t\t\t\t\t\t\toverlay={renderTooltipAdjustments}>\n\t\t\t\t\t\t\t<NavDropdown\n\t\t\t\t\t\t\t\tonSelect={e => changeSettings(e)}\n\t\t\t\t\t\t\t\ttitle='Adjustments'\n\t\t\t\t\t\t\t\tid='adjustments'>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='lighten'>Lighten</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='brighten'>\n\t\t\t\t\t\t\t\t\tBrighten\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='darken'>Darken</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='desaturate'>\n\t\t\t\t\t\t\t\t\tDesaturate\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='saturate'>\n\t\t\t\t\t\t\t\t\tSaturate\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='greyscale'>\n\t\t\t\t\t\t\t\t\tGreyscale\n\t\t\t\t\t\t\t\t</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t\t<NavDropdown.Divider />\n\t\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\t\tplacement='right'\n\t\t\t\t\t\t\tdelay={{ show: 250, hide: 200 }}\n\t\t\t\t\t\t\toverlay={renderTooltipIntensity}>\n\t\t\t\t\t\t\t<NavDropdown\n\t\t\t\t\t\t\t\tonSelect={e => handleSettingValueChange(e)}\n\t\t\t\t\t\t\t\ttitle='Intensity'>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='2'>10%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='4'>20%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='6'>30%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='8'>40%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='12'>50%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='16'>60%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='20'>70%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='30'>80%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='40'>90%</NavDropdown.Item>\n\t\t\t\t\t\t\t\t<NavDropdown.Item eventKey='50'>100%</NavDropdown.Item>\n\t\t\t\t\t\t\t</NavDropdown>\n\t\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t</Nav>\n\t\t\t\t<Form onChange={e => handleHexChange(e)} inline>\n\t\t\t\t\t<OverlayTrigger\n\t\t\t\t\t\tplacement='bottom'\n\t\t\t\t\t\tdelay={{ show: 250, hide: 200 }}\n\t\t\t\t\t\toverlay={renderTooltipInput}>\n\t\t\t\t\t\t<FormControl\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='#77d36a'\n\t\t\t\t\t\t\tclassName='mr-sm-2'\n\t\t\t\t\t\t/>\n\t\t\t\t\t</OverlayTrigger>\n\t\t\t\t</Form>\n\t\t\t</Navbar>\n\t\t</div>\n\t);\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Palette from './Palette';\nimport Settings from './Navbar';\n\nfunction App() {\n\tconst [hex, changeHex] = useState('#5f42ad');\n\tconst [variation, changeVariation] = useState('tetrad');\n\tconst [setting, changeSetting] = useState();\n\tconst [settingValue, changeSettingValue] = useState(20);\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Settings\n\t\t\t\tchangeSetting={changeSetting}\n\t\t\t\tchangeVariation={changeVariation}\n\t\t\t\tchangeHex={changeHex}\n\t\t\t\tchangeSettingValue={changeSettingValue}\n\t\t\t/>\n\t\t\t<Palette\n\t\t\t\tsettingValue={settingValue}\n\t\t\t\tsetting={setting}\n\t\t\t\tvariation={variation}\n\t\t\t\thex={hex}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}